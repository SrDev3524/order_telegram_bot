<%
// Helper function to safely parse images
function parseImages(imagesData) {
    try {
        if (!imagesData) return [];
        if (typeof imagesData === 'string') {
            // Check if it's already a path (not JSON)
            if (imagesData.startsWith('/') || imagesData.startsWith('http')) {
                return [imagesData];
            }
            // Try to parse as JSON
            return JSON.parse(imagesData);
        }
        if (Array.isArray(imagesData)) {
            return imagesData;
        }
        return [];
    } catch (e) {
        // If parsing fails, treat as single image path
        return [imagesData];
    }
}
%>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Управління товарами</h2>
    <button type="button" class="btn btn-primary" id="addProductBtn">
        <i class="fas fa-plus"></i> Додати товар
    </button>
</div>

<% if (error) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <%= error %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
<% } %>

<% if (success) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <%= success %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
<% } %>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" id="searchProducts" placeholder="Search products...">
            <button class="btn btn-outline-secondary" type="button">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" id="categoryFilter">
            <option value="">All Categories</option>
            <% categories.forEach(category => { %>
                <option value="<%= category.id %>"><%= category.name %></option>
            <% }); %>
        </select>
    </div>
    <div class="col-md-3">
        <select class="form-select" id="statusFilter">
            <option value="">All Status</option>
            <option value="1">Active</option>
            <option value="0">Inactive</option>
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover" id="productsTable">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Image</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Sale</th>
                <th>Stock</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% products.forEach(product => { %>
                <tr data-product-id="<%= product.id %>" data-category-id="<%= product.category_id %>" class="<%= product.active ? '' : 'table-secondary' %>">
                    <td><%= product.id %></td>
                    <td>
                        <% const images = parseImages(product.images); %>
                        <% if (images.length > 0 && images[0]) { %>
                            <img src="<%= images[0] %>" alt="<%= product.name %>" 
                                 class="product-thumbnail" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                            <div class="bg-light d-none align-items-center justify-content-center" 
                                 style="width: 40px; height: 40px; border-radius: 4px;">
                                <i class="fas fa-image text-muted"></i>
                            </div>
                        <% } else { %>
                            <div class="bg-light d-flex align-items-center justify-content-center" 
                                 style="width: 40px; height: 40px; border-radius: 4px;">
                                <i class="fas fa-image text-muted"></i>
                            </div>
                        <% } %>
                    </td>
                    <td><strong><%= product.name %></strong></td>
                    <td>
                        <% const category = categories.find(c => c.id === product.category_id) %>
                        <% if (category) { %>
                            <span class="badge bg-info"><%= category.name %></span>
                        <% } else { %>
                            <span class="text-muted">-</span>
                        <% } %>
                    </td>
                    <td><%= product.price %> UAH</td>
                    <td>
                        <% if (product.sale_price && product.sale_price < product.price) { %>
                            <span class="badge bg-success"><%= product.sale_price %> UAH</span>
                        <% } else { %>
                            <span class="text-muted">-</span>
                        <% } %>
                    </td>
                    <td>
                        <% if (product.stock_quantity > 0) { %>
                            <span class="badge bg-success"><%= product.stock_quantity %></span>
                        <% } else { %>
                            <span class="badge bg-danger">0</span>
                        <% } %>
                    </td>
                    <td>
                        <% if (product.active) { %>
                            <span class="badge bg-success">Active</span>
                        <% } else { %>
                            <span class="badge bg-danger">Inactive</span>
                        <% } %>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-primary edit-product" 
                                    data-product-id="<%= product.id %>" 
                                    title="Редагувати">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-outline-danger delete-product" 
                                    data-product-id="<%= product.id %>" 
                                    data-product-name="<%= product.name %>"
                                    title="Видалити">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>
</div>

<% if (products.length === 0) { %>
    <div class="text-center py-5">
        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">No Products</h5>
        <p class="text-muted">Add your first product to get started</p>
    </div>
<% } %>

<!-- Product Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="productModalTitle">Додати товар</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="productForm" action="/admin/products" method="POST" enctype="multipart/form-data">
          <input type="hidden" id="productId" name="productId">
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="productName" class="form-label">Назва товару *</label>
                <input type="text" class="form-control" id="productName" name="name" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="productSku" class="form-label">SKU</label>
                <input type="text" class="form-control" id="productSku" name="sku">
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label for="productDescription" class="form-label">Description</label>
            <textarea class="form-control" id="productDescription" name="description" rows="3"></textarea>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="productCategory" class="form-label">Category *</label>
                <select class="form-select" id="productCategory" name="category_id" required>
                  <option value="">Select Category</option>
                  <% categories.forEach(category => { %>
                    <option value="<%= category.id %>"><%= category.name %></option>
                  <% }) %>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="productStock" class="form-label">Stock</label>
                <input type="number" class="form-control" id="productStock" name="stock_quantity" value="0" min="0">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="productPrice" class="form-label">Regular Price *</label>
                <input type="number" class="form-control" id="productPrice" name="price" required step="0.01" min="0">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="salePrice" class="form-label">Sale Price</label>
                <input type="number" class="form-control" id="salePrice" name="sale_price" step="0.01" min="0">
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label for="productImages" class="form-label">Images</label>
            <input type="file" class="form-control" id="productImages" name="images" multiple accept="image/*">
            <div class="form-text">Upload up to 5 images. Maximum file size: 5MB</div>
            <div id="imagePreviewContainer" class="mt-2"></div>
          </div>

          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="productActive" name="active" checked>
            <label class="form-check-label" for="productActive">Active Product</label>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete product <strong id="deleteProductName"></strong>?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteProduct">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    initProductManagement();
});

function initProductManagement() {
    const productModal = new bootstrap.Modal(document.getElementById('productModal'));
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    const productForm = document.getElementById('productForm');
    const imageInput = document.getElementById('productImages');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    
    // Image preview
    imageInput.addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        imagePreviewContainer.innerHTML = '';
        
        files.forEach(file => {
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const imageDiv = document.createElement('div');
                    imageDiv.className = 'mb-2';
                    imageDiv.innerHTML = `
                        <img src="${e.target.result}" class="img-fluid border rounded" style="max-height: 100px; max-width: 100%;">
                        <small class="text-muted d-block">${file.name}</small>
                    `;
                    imagePreviewContainer.appendChild(imageDiv);
                };
                reader.readAsDataURL(file);
            }
        });
    });
    
    // Add product
    document.getElementById('addProductBtn').addEventListener('click', function() {
        resetForm();
        document.getElementById('productModalTitle').textContent = 'Add Product';
        productModal.show();
    });
    
    // Edit product
    document.querySelectorAll('.edit-product').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.dataset.productId;
            loadProductForEdit(productId);
        });
    });
    
    // Delete product
    document.querySelectorAll('.delete-product').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.dataset.productId;
            const productName = this.dataset.productName;
            document.getElementById('deleteProductName').textContent = productName;
            document.getElementById('confirmDeleteProduct').dataset.productId = productId;
            deleteModal.show();
        });
    });
    
    // Confirm delete
    document.getElementById('confirmDeleteProduct').addEventListener('click', function() {
        const productId = this.dataset.productId;
        deleteProduct(productId);
    });
    
    // Form submit
    productForm.addEventListener('submit', function(e) {
        e.preventDefault();
        submitProductForm();
    });
    
    // Search and filter
    document.getElementById('searchProducts').addEventListener('input', filterProducts);
    document.getElementById('categoryFilter').addEventListener('change', filterProducts);
    document.getElementById('statusFilter').addEventListener('change', filterProducts);
}

function resetForm() {
    document.getElementById('productForm').reset();
    document.getElementById('productId').value = '';
    document.getElementById('imagePreviewContainer').innerHTML = '';
}

function loadProductForEdit(productId) {
    fetch(`/admin/products/api/${productId}`)
        .then(response => response.json())
        .then(product => {
            document.getElementById('productModalTitle').textContent = 'Edit Product';
            document.getElementById('productId').value = product.id;
            document.getElementById('productName').value = product.name;
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('productCategory').value = product.category_id || '';
            document.getElementById('productSku').value = product.sku || '';
            document.getElementById('productPrice').value = product.price;
            document.getElementById('salePrice').value = product.sale_price || '';
            document.getElementById('productStock').value = product.stock_quantity || 0;
            document.getElementById('productActive').checked = product.active;
            
            new bootstrap.Modal(document.getElementById('productModal')).show();
        })
        .catch(error => {
            console.error('Error loading product:', error);
            alert('Error loading product');
        });
}

function submitProductForm() {
    const formData = new FormData(document.getElementById('productForm'));
    const productId = document.getElementById('productId').value;
    const isEdit = productId !== '';
    
    const url = isEdit ? `/admin/products/${productId}` : '/admin/products';
    const method = isEdit ? 'PUT' : 'POST';
    
    fetch(url, {
        method: method,
        body: formData
    })
    .then(response => {
        if (isEdit) {
            return response.json();
        } else {
            return response.text();
        }
    })
    .then(data => {
        if (isEdit) {
            if (data.message) {
                location.reload();
            } else {
                alert(data.error || 'Error updating product');
            }
        } else {
            location.reload();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error saving product');
    });
}

function deleteProduct(productId) {
    fetch(`/admin/products/${productId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            document.getElementById('deleteModal').querySelector('.btn-close').click();
            location.reload();
        } else {
            alert(data.error || 'Error deleting product');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error deleting product');
    });
}

function filterProducts() {
    const searchTerm = document.getElementById('searchProducts').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const rows = document.querySelectorAll('#productsTable tbody tr');
    
    rows.forEach(row => {
        const name = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
        const categoryId = row.dataset.categoryId || '';
        const isActive = !row.classList.contains('table-secondary');
        
        const matchesSearch = name.includes(searchTerm);
        const matchesCategory = !categoryFilter || categoryId === categoryFilter;
        const matchesStatus = !statusFilter || 
            (statusFilter === '1' && isActive) || 
            (statusFilter === '0' && !isActive);
        
        row.style.display = matchesSearch && matchesCategory && matchesStatus ? '' : 'none';
    });
}
</script>

