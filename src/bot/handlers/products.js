const db = require('../../database/connection')
const fs = require('fs')
const path = require('path')

// =============================================================================
// CONSTANTS & CONFIGURATION
// =============================================================================

const MESSAGES = {
  categories: `üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:`,
  no_products: '–ù–∞ –∂–∞–ª—å, –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.',
  back: '‚¨Ö –ù–∞–∑–∞–¥',
  main_menu_btn: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
  browse_selection: `üõç –û–±–∏—Ä–∞–π—Ç–µ, —è–∫ –∑—Ä—É—á–Ω—ñ—à–µ —à—É–∫–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏:\n\nüìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äì –≥–æ—Ä—Ç–∞–π—Ç–µ —Ç–∞ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ —É–ª—é–±–ª–µ–Ω–µ\nü§ñ  AI-–ø–æ–º—ñ—á–Ω–∏–∫ ‚Äì —Ä–æ–∑–∫–∞–∂—ñ—Ç—å, —â–æ —à—É–∫–∞—î—Ç–µ, –∞ —è –ø—ñ–¥–±–µ—Ä—É –Ω–∞–π–∫—Ä–∞—â–µ `,
  ai_activated: `ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π!\n\n–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n‚Ä¢ "–Ø —Ö–æ—á—É –Ω—ñ—á–Ω—É —Å–æ—Ä–æ—á–∫—É"\n‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–µ—Ä–µ–∂–∏–≤–Ω—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏"\n‚Ä¢ ¬´–®–æ–≤–∫–æ–≤–∏–π —Ö–∞–ª–∞—Ç¬ª\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø—ñ—à—ñ—Ç—å —Å–≤–æ—î –±–∞–∂–∞–Ω–Ω—è ‚Äî —ñ —è –ø—ñ–¥–±–µ—Ä—É –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É ‚ù§Ô∏è \nüè† –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–±–µ—Ä—ñ—Ç—å /start`
}

const CONFIG = {
  photos_per_page: 10,
  max_ai_recommendations: 5
}

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

/**
 * Creates inline keyboard for product actions
 */
function createProductKeyboard(productId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìè –î–æ–≤—ñ–¥–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤', callback_data: `size_help_${productId}` }],
        [{ text: 'üõí –ó–∞–º–æ–≤–∏—Ç–∏', callback_data: `order_${productId}` }],
        [{ text: MESSAGES.back, callback_data: 'back' }]
      ]
    }
  }
}

/**
 * Creates keyboard for browse mode selection
 */
function createBrowseModeKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìã –û–±—Ä–∞—Ç–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'browse_manual' },
          { text: 'ü§ñ AI –ø–æ–º—ñ—á–Ω–∏–∫', callback_data: 'browse_ai' }
        ],
        [{ text: MESSAGES.main_menu_btn, callback_data: 'main_menu' }]
      ]
    }
  }
}

/**
 * Creates keyboard for product list
 */
function createProductListKeyboard(products) {
  return {
    reply_markup: {
      inline_keyboard: [
        ...products.map(product => [{
          text: `${product.name} - ${product.sale_price || product.price}‚Ç¥`,
          callback_data: `product_${product.id}`
        }]),
        [{ text: MESSAGES.back, callback_data: 'back' }]
      ]
    }
  }
}

/**
 * Creates keyboard for categories list
 */
function createCategoriesKeyboard(categories) {
  return {
    reply_markup: {
      inline_keyboard: [
        ...categories.map(cat => [{
          text: cat.name,
          callback_data: `category_${cat.id}`
        }]),
        [{ text: MESSAGES.back, callback_data: 'back' }]
      ]
    }
  }
}

/**
 * Formats product information for display
 */
function formatProductText(product) {
  const price = product.sale_price || product.price
  const originalPrice = product.sale_price ? product.price : null

  let productText = `üõç ${product.name}\n\n`

  // Parse and display variants
  if (product.description) {
    try {
      const variants = JSON.parse(product.description)
      if (variants.colors && variants.colors.length > 0) {
        productText += `üé® –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏: ${variants.colors.join(', ')}\n`
      }
      if (variants.sizes && variants.sizes.length > 0) {
        productText += `üìè –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: ${variants.sizes.join(', ')}\n`
      }
      if (variants.colors || variants.sizes) {
        productText += '\n'
      }
    } catch (e) {
      productText += `üìù ${product.description}\n\n`
    }
  }

  // Add pricing information
  productText += `üí∞ –¶—ñ–Ω–∞: ${price}‚Ç¥`
  if (originalPrice) {
    productText += ` ~~${originalPrice}‚Ç¥~~`
  }
  productText += `\nüì¶ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: ${product.stock_quantity} —à—Ç.`

  return productText
}

/**
 * Parses product images safely
 */
function parseProductImages(images) {
  let imageList = []
  try {
    if (images) {
      if (typeof images === 'string') {
        if (images.startsWith('/') || images.startsWith('http')) {
          imageList = [images]
        } else {
          imageList = JSON.parse(images)
        }
      } else if (Array.isArray(images)) {
        imageList = images
      }
    }
  } catch (e) {
    console.log('Error parsing images, treating as single path:', images)
    imageList = [images]
  }
  return imageList
}

/**
 * Validates image files and returns valid paths
 */
function getValidImagePaths(images) {
  const validImages = []
  for (const image of images) {
    const imagePath = path.join(__dirname, '../../../public', image)
    if (fs.existsSync(imagePath)) {
      validImages.push(imagePath)
    }
  }
  return validImages
}

// =============================================================================
// DATABASE QUERIES
// =============================================================================

/**
 * Gets product with category information
 */
async function getProductWithCategory(productId) {
  return await db.get(`
    SELECT p.*, c.name as category_name 
    FROM products p 
    LEFT JOIN categories c ON p.category_id = c.id 
    WHERE p.id = ?
  `, [productId])
}

/**
 * Gets all active categories
 */
async function getActiveCategories() {
  return await db.all(`
    SELECT id, name, description 
    FROM categories 
    WHERE active = 1 
    ORDER BY sort_order ASC, name ASC
  `)
}

/**
 * Gets products by category
 */
async function getProductsByCategory(categoryId) {
  return await db.all(`
    SELECT id, name, description, price, sale_price, images 
    FROM products 
    WHERE category_id = ? AND active = 1 
    ORDER BY name ASC
  `, [categoryId])
}

// =============================================================================
// IMAGE HANDLING
// =============================================================================

/**
 * Creates photo navigation buttons for multi-image products
 */
function createPhotoNavigation(product, validImages, photoPage) {
  const photoNavigation = []
  
  if (validImages.length > CONFIG.photos_per_page) {
    const navigationRow = []
    if (photoPage > 0) {
      navigationRow.push({ 
        text: '‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ñ–æ—Ç–æ', 
        callback_data: `product_${product.id}_photos_${photoPage - 1}` 
      })
    }
    const endIndex = Math.min((photoPage + 1) * CONFIG.photos_per_page, validImages.length)
    if (endIndex < validImages.length) {
      navigationRow.push({ 
        text: '–ù–∞—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ç–æ ‚û°Ô∏è', 
        callback_data: `product_${product.id}_photos_${photoPage + 1}` 
      })
    }
    if (navigationRow.length > 0) {
      photoNavigation.push(navigationRow)
    }
  }
  
  return photoNavigation
}

/**
 * Creates media group for multiple product images
 */
function createMediaGroup(product, photosToShow, startIndex, endIndex, totalImages) {
  return photosToShow.map((imagePath, index) => ({
    type: 'photo',
    media: { source: imagePath },
    caption: index === 0 
      ? `üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä—É "${product.name}" (${startIndex + 1}-${endIndex} –∑ ${totalImages})` 
      : undefined
  }))
}

/**
 * Sends product with images or falls back to text
 */
async function sendProductWithImages(ctx, product, productText, keyboard, deleteMessage = false, photoPage = 0) {
  const images = parseProductImages(product.images)
  const validImages = getValidImagePaths(images)

  if (validImages.length === 0) {
    return false
  }

  try {
    if (deleteMessage) {
      await ctx.deleteMessage()
    }

    if (validImages.length === 1) {
      await ctx.replyWithPhoto(
        { source: validImages[0] },
        { caption: productText, ...keyboard }
      )
    } else {
      await sendMultipleImages(ctx, product, validImages, productText, keyboard, photoPage)
    }
    return true
  } catch (imgError) {
    console.log('Failed to send images, sending text instead:', imgError)
    return false
  }
}

/**
 * Handles sending multiple product images with pagination
 */
async function sendMultipleImages(ctx, product, validImages, productText, keyboard, photoPage) {
  const startIndex = photoPage * CONFIG.photos_per_page
  const endIndex = Math.min(startIndex + CONFIG.photos_per_page, validImages.length)
  const photosToShow = validImages.slice(startIndex, endIndex)

  const mediaGroup = createMediaGroup(product, photosToShow, startIndex, endIndex, validImages.length)
  await ctx.replyWithMediaGroup(mediaGroup)

  const photoNavigation = createPhotoNavigation(product, validImages, photoPage)
  
  if (photoNavigation.length > 0) {
    if (keyboard.reply_markup && keyboard.reply_markup.inline_keyboard) {
      keyboard.reply_markup.inline_keyboard = [...photoNavigation, ...keyboard.reply_markup.inline_keyboard]
    } else {
      keyboard.reply_markup = { inline_keyboard: photoNavigation }
    }
  }

  await ctx.reply(productText, keyboard)
}

function setupProductHandlers(bot) {
  bot.hears('üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏', async(ctx) => {
    try {
      ctx.session.navigationStack = [{ type: 'browse_mode_selection' }]

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –û–±—Ä–∞—Ç–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'browse_manual' },
              { text: 'ü§ñ AI –ø–æ–º—ñ—á–Ω–∏–∫', callback_data: 'browse_ai' }
            ],
            [{ text: MESSAGES.main_menu_btn, callback_data: 'main_menu' }]
          ]
        }
      }

      await ctx.reply(`üõç –û–±–∏—Ä–∞–π—Ç–µ, —è–∫ –∑—Ä—É—á–Ω—ñ—à–µ —à—É–∫–∞—Ç–∏ –ø–æ–∫—É–ø–∫–∏:

üìã –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äì –≥–æ—Ä—Ç–∞–π—Ç–µ —Ç–∞ –∑–Ω–∞—Ö–æ–¥—å—Ç–µ —É–ª—é–±–ª–µ–Ω–µ
ü§ñ  AI-–ø–æ–º—ñ—á–Ω–∏–∫ ‚Äì —Ä–æ–∑–∫–∞–∂—ñ—Ç—å, —â–æ —à—É–∫–∞—î—Ç–µ, –∞ —è –ø—ñ–¥–±–µ—Ä—É –Ω–∞–π–∫—Ä–∞—â–µ `, keyboard)
    } catch (error) {
      console.error('Error showing browse options:', error)
      await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.')
    }
  })

  bot.action('browse_manual', async(ctx) => {
    try {
      const categories = await db.all(`
        SELECT id, name, description 
        FROM categories 
        WHERE active = 1 
        ORDER BY sort_order ASC, name ASC
      `)

      if (categories.length === 0) {
        await ctx.editMessageText('–ù–∞ —Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.')
        return
      }

      ctx.session.navigationStack.push({ type: 'categories' })

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...categories.map(cat => [{
              text: cat.name,
              callback_data: `category_${cat.id}`
            }]),
            [{ text: MESSAGES.back, callback_data: 'back' }]
          ]
        }
      }

      await ctx.editMessageText(MESSAGES.categories, keyboard)
    } catch (error) {
      console.error('Error loading categories:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.')
    }
  })

  bot.action('browse_ai', async(ctx) => {
    try {
      ctx.session.aiSearchMode = true
      await ctx.editMessageText(`ü§ñ AI –ü–æ–º—ñ—á–Ω–∏–∫ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π!

–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "–Ø —Ö–æ—á—É –Ω—ñ—á–Ω—É —Å–æ—Ä–æ—á–∫—É"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–µ—Ä–µ–∂–∏–≤–Ω—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏"
‚Ä¢ ¬´–®–æ–≤–∫–æ–≤–∏–π —Ö–∞–ª–∞—Ç¬ª

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –±–∞–∂–∞–Ω–Ω—è ‚Äî —ñ —è –ø—ñ–¥–±–µ—Ä—É –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É ‚ù§Ô∏è 
üè† –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–±–µ—Ä—ñ—Ç—å /start`)

      await ctx.answerCbQuery()
    } catch (error) {
      console.error('Error activating AI mode:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó AI –ø–æ–º—ñ—á–Ω–∏–∫–∞.')
    }
  })

  bot.action('view_ai_recommendations', async(ctx) => {
    try {
      const recommendations = ctx.session.lastAiRecommendations || []
      
      if (recommendations.length === 0) {
        await ctx.editMessageText('–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.')
        return
      }

      ctx.session.navigationStack = ctx.session.navigationStack || []
      ctx.session.navigationStack.push({ type: 'ai_recommendations' })

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...recommendations.map(product => [{
              text: `üõç ${product.name} - ${product.price}‚Ç¥`,
              callback_data: `product_${product.id}`
            }]),
            [
              { text: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤', callback_data: 'view_ai_categories' },
              { text: MESSAGES.back, callback_data: 'back' }
            ]
          ]
        }
      }

      const headerText = `üìã AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

–û—Å—å —É—Å—ñ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞–≤ –¥–ª—è –≤–∞—Å:

üëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É`

      await ctx.editMessageText(headerText, keyboard)
      await ctx.answerCbQuery()
    } catch (error) {
      console.error('Error showing AI recommendations:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.')
    }
  })

  bot.action('view_ai_categories', async(ctx) => {
    try {
      const recommendations = ctx.session.lastAiRecommendations || []
      
      if (recommendations.length === 0) {
        await ctx.editMessageText('–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.')
        return
      }

      const productIds = recommendations.map(p => p.id)
      const categories = await db.all(`
        SELECT DISTINCT c.id, c.name 
        FROM categories c 
        JOIN products p ON p.category_id = c.id 
        WHERE p.id IN (${productIds.map(() => '?').join(',')}) 
        AND c.active = 1 
        ORDER BY c.name ASC
      `, productIds)

      if (categories.length === 0) {
        await ctx.editMessageText('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.')
        return
      }

      ctx.session.navigationStack = ctx.session.navigationStack || []
      ctx.session.navigationStack.push({ type: 'ai_categories' })

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...categories.map(cat => [{
              text: cat.name,
              callback_data: `category_${cat.id}`
            }]),
            [{ text: MESSAGES.back, callback_data: 'back' }]
          ]
        }
      }

      await ctx.editMessageText('üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:', keyboard)
      await ctx.answerCbQuery()
    } catch (error) {
      console.error('Error showing AI categories:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.')
    }
  })

  bot.action(/category_(\d+)/, async(ctx) => {
    const categoryId = parseInt(ctx.match[1])

    try {
      const [category, products] = await Promise.all([
        db.get('SELECT * FROM categories WHERE id = ?', [categoryId]),
        getProductsByCategory(categoryId)
      ])

      if (!category) {
        await ctx.editMessageText('–¶—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.')
        return
      }

      ctx.session.navigationStack.push({ type: 'category_products', categoryId })

      if (products.length === 0) {
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: MESSAGES.back, callback_data: 'back' }]
            ]
          }
        }
        await ctx.editMessageText(`üìÇ ${category.name}\n\n${MESSAGES.no_products}`, keyboard)
        return
      }

      const keyboard = createProductListKeyboard(products)
      await ctx.editMessageText(`üìÇ ${category.name}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:`, keyboard)
    } catch (error) {
      console.error('Error loading products:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤.')
    }
  })

  // Photo navigation handler
  bot.action(/product_(\d+)_photos_(\d+)/, async(ctx) => {
    await ctx.answerCbQuery()
    const productId = parseInt(ctx.match[1])
    const photoPage = parseInt(ctx.match[2])

    try {
      const product = await getProductWithCategory(productId)
      if (!product) {
        await ctx.reply('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        return
      }

      const productText = formatProductText(product)
      const keyboard = createProductKeyboard(productId)
      await sendProductWithImages(ctx, product, productText, keyboard, true, photoPage)
    } catch (error) {
      console.error('Error loading product photos:', error)
      await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ.')
    }
  })

  // Product details handler
  bot.action(/product_(\d+)/, async(ctx) => {
    const productId = parseInt(ctx.match[1])

    try {
      const product = await getProductWithCategory(productId)
      if (!product) {
        await ctx.editMessageText('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        return
      }

      ctx.session.navigationStack.push({ type: 'product_details', productId })

      const productText = formatProductText(product)
      const keyboard = createProductKeyboard(productId)
      const imageSent = await sendProductWithImages(ctx, product, productText, keyboard, true)

      if (!imageSent) {
        await ctx.editMessageText(productText, keyboard)
      }
    } catch (error) {
      console.error('Error loading product:', error)
      await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.')
    }
  })

  // Size help handler
  bot.action(/size_help_(\d+)/, async(ctx) => {
    await ctx.answerCbQuery()
    const productId = parseInt(ctx.match[1])

    const sizeGuide = `üìè –î–æ–≤—ñ–¥–∫–∞ –ø–æ —Ä–æ–∑–º—ñ—Ä–∞—Ö\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ–±—Ä–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä.\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–º—ñ—Ä—è–π—Ç–µ:\n‚Ä¢ –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π (–ì)\n‚Ä¢ –û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó (–¢) \n‚Ä¢ –û–±—Ö–≤–∞—Ç —Å—Ç–µ–≥–æ–Ω (–°)\n\n–¢–∞–±–ª–∏—Ü—è —Ä–æ–∑–º—ñ—Ä—ñ–≤:\n\nXS: –ì 84 | –¢ 66‚Äì76 | –° 92 (UA 42)\nS: 88 | 70‚Äì80 | 96 (UA 44)\nM: 92 | 74‚Äì84 | 100 (UA 46)\nL: 96 | 78‚Äì88 | 104 (UA 48)\nXL: 100 | 82‚Äì90 | 108 (UA 50)\n2XL: 104 | 86‚Äì94 | 112 (UA 52)\n3XL: 108‚Äì114 | 90‚Äì98 | 116‚Äì126 (UA 54)\n4XL: 112‚Äì118 | 98‚Äì102 | 120‚Äì130 (UA 56)\n5XL: 116‚Äì122 | 102‚Äì106 | 124‚Äì134 (UA 58)\n6XL: 120‚Äì126 | 106‚Äì112 | 128‚Äì138 (UA 60)\n7XL: 124‚Äì130 | 112‚Äì118 | 132‚Äì142 (UA 62)\n\n–í—Å—ñ –º—ñ—Ä–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö`

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚¨Ö –ù–∞–∑–∞–¥ –¥–æ —Ç–æ–≤–∞—Ä—É', callback_data: `back_to_product_${productId}` }]
        ]
      }
    }

    await ctx.reply(sizeGuide, keyboard)
  })

  // Back to product from size help
  bot.action(/back_to_product_(\d+)/, async(ctx) => {
    await ctx.answerCbQuery()
    const productId = parseInt(ctx.match[1])

    try {
      const product = await getProductWithCategory(productId)
      if (!product) {
        await ctx.reply('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        return
      }

      const productText = formatProductText(product)
      const keyboard = createProductKeyboard(productId)
      const imageSent = await sendProductWithImages(ctx, product, productText, keyboard, false)

      if (!imageSent) {
        await ctx.reply(productText, keyboard)
      }
    } catch (error) {
      console.error('Error loading product:', error)
      await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.')
    }
  })

  // Back navigation
  bot.action('back', async(ctx) => {
    if (!ctx.session.navigationStack || ctx.session.navigationStack.length <= 1) {
      return
    }

    ctx.session.navigationStack.pop()
    const previousState = ctx.session.navigationStack[ctx.session.navigationStack.length - 1]

    try {
      switch (previousState.type) {
        case 'browse_mode_selection':
          const browseKeyboard = createBrowseModeKeyboard()
          await ctx.editMessageText(MESSAGES.browse_selection, browseKeyboard)
          break
        case 'categories':
          const categories = await getActiveCategories()
          const categoriesKeyboard = createCategoriesKeyboard(categories)
          await ctx.editMessageText(MESSAGES.categories, categoriesKeyboard)
          break
        case 'category_products':
          const categoryId = previousState.categoryId
          const [category, products] = await Promise.all([
            db.get('SELECT * FROM categories WHERE id = ?', [categoryId]),
            getProductsByCategory(categoryId)
          ])
          const productsKeyboard = createProductListKeyboard(products)
          await ctx.editMessageText(`üìÇ ${category.name}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:`, productsKeyboard)
          break
        case 'ai_recommendations':
        case 'ai_categories':
          const backKeyboard = createBrowseModeKeyboard()
          await ctx.editMessageText(MESSAGES.browse_selection, backKeyboard)
          break
        default:
          await ctx.deleteMessage()
      }
    } catch (error) {
      console.error('Navigation error:', error)
    }
  })

  // Order handler
  bot.action(/order_(\d+)/, async(ctx) => {
    const productId = parseInt(ctx.match[1])
    await ctx.answerCbQuery()
    return ctx.scene.enter('order-wizard', { productId })
  })

  // Main menu return
  bot.action('main_menu', async(ctx) => {
    await ctx.answerCbQuery()
    await ctx.deleteMessage()
    ctx.session.navigationStack = [{ type: 'main_menu' }]

    const { mainReplyKeyboard } = require('../keyboards/mainKeyboard')
    await ctx.reply(
      'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:',
      mainReplyKeyboard
    )
  })

/**
 * Handles product photo navigation
 */
async function handleProductPhotoNavigation(ctx, productId, photoPage) {
  try {
    const product = await getProductWithCategory(productId)

    if (!product) {
      await ctx.reply('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
      return
    }

    const productText = formatProductText(product)
    const keyboard = createProductKeyboard(productId)
    await sendProductWithImages(ctx, product, productText, keyboard, true, photoPage)
  } catch (error) {
    console.error('Error loading product photos:', error)
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ.')
  }
}

/**
 * Handles product detail display
 */
async function handleProductDetails(ctx, productId) {
  try {
    const product = await getProductWithCategory(productId)

    if (!product) {
      await ctx.editMessageText('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
      return
    }

    ctx.session.navigationStack.push({ type: 'product_details', productId })

    const productText = formatProductText(product)
    const keyboard = createProductKeyboard(productId)
    const imageSent = await sendProductWithImages(ctx, product, productText, keyboard, true)

    if (!imageSent) {
      await ctx.editMessageText(productText, keyboard)
    }
  } catch (error) {
    console.error('Error loading product:', error)
    await ctx.editMessageText('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.')
  }
}

/**
 * Handles size help display
 */
async function handleSizeHelp(ctx, productId) {
  const sizeGuide = `üìè –î–æ–≤—ñ–¥–∫–∞ –ø–æ —Ä–æ–∑–º—ñ—Ä–∞—Ö\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ–±—Ä–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä.\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–º—ñ—Ä—è–π—Ç–µ:\n‚Ä¢ –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π (–ì)\n‚Ä¢ –û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó (–¢) \n‚Ä¢ –û–±—Ö–≤–∞—Ç —Å—Ç–µ–≥–æ–Ω (–°)\n\n–¢–∞–±–ª–∏—Ü—è —Ä–æ–∑–º—ñ—Ä—ñ–≤:\n\nXS: –ì 84 | –¢ 66‚Äì76 | –° 92 (UA 42)\nS: 88 | 70‚Äì80 | 96 (UA 44)\nM: 92 | 74‚Äì84 | 100 (UA 46)\nL: 96 | 78‚Äì88 | 104 (UA 48)\nXL: 100 | 82‚Äì90 | 108 (UA 50)\n2XL: 104 | 86‚Äì94 | 112 (UA 52)\n3XL: 108‚Äì114 | 90‚Äì98 | 116‚Äì126 (UA 54)\n4XL: 112‚Äì118 | 98‚Äì102 | 120‚Äì130 (UA 56)\n5XL: 116‚Äì122 | 102‚Äì106 | 124‚Äì134 (UA 58)\n6XL: 120‚Äì126 | 106‚Äì112 | 128‚Äì138 (UA 60)\n7XL: 124‚Äì130 | 112‚Äì118 | 132‚Äì142 (UA 62)\n\n–í—Å—ñ –º—ñ—Ä–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö`

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚¨Ö –ù–∞–∑–∞–¥ –¥–æ —Ç–æ–≤–∞—Ä—É', callback_data: `back_to_product_${productId}` }]
      ]
    }
  }

  // Use reply instead of editMessageText for compatibility with photo messages
  await ctx.reply(sizeGuide, keyboard)
}

/**
 * Handles return to product from size help
 */
async function handleBackToProduct(ctx, productId) {
  try {
    const product = await getProductWithCategory(productId)

    if (!product) {
      await ctx.reply('–¶–µ–π —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
      return
    }

    const productText = formatProductText(product)
    const keyboard = createProductKeyboard(productId)
    const imageSent = await sendProductWithImages(ctx, product, productText, keyboard, false)

    if (!imageSent) {
      await ctx.reply(productText, keyboard)
    }
  } catch (error) {
    console.error('Error loading product:', error)
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É.')
  }
}
}

module.exports = { setupProductHandlers }
