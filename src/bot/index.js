const { Scenes } = require('telegraf')
const aiService = require('../services/ai')
const orderWizard = require('./scenes/orderWizard')

const { setupStartHandlers } = require('./handlers/start')
const { setupProductHandlers } = require('./handlers/products')
const { setupOrderHandlers } = require('./handlers/orders')
const { setupSupportHandlers } = require('./handlers/support')

function initializeBot(bot) {
  const stage = new Scenes.Stage([orderWizard])
  bot.use(stage.middleware())

  bot.use(async(ctx, next) => {
    if (ctx.from) {
      ctx.user = {
        id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name
      }
    }
    return next()
  })

  bot.context.goBack = function() {
    if (this.session.navigationStack && this.session.navigationStack.length > 1) {
      this.session.navigationStack.pop()
      return this.session.navigationStack[this.session.navigationStack.length - 1]
    }
    return { type: 'main_menu' }
  }

  bot.context.pushNavigation = function(state) {
    if (!this.session.navigationStack) {
      this.session.navigationStack = []
    }
    this.session.navigationStack.push(state)
  }

  setupStartHandlers(bot)
  setupProductHandlers(bot)
  setupOrderHandlers(bot)
  setupSupportHandlers(bot)

  bot.on('text', async(ctx) => {
    if (ctx.session.supportMessage) {
      return
    }

    if (ctx.session.__scenes?.current && !ctx.scene?.state?.completed) {
      return
    }

    if (ctx.session.aiSearchMode) {
      try {
        await ctx.sendChatAction('typing')

        const aiResponse = await aiService.getProductRecommendations(
          ctx.message.text,
          ctx.user.id
        )

        const keyboard = aiService.createRecommendationKeyboard(aiResponse.recommendedProducts)
        await ctx.reply(aiResponse.text, keyboard)
      } catch (error) {
        console.error('Error in AI consultation:', error)
        await ctx.reply(`‚ùå –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑ AI –ø–æ–º—ñ—á–Ω–∏–∫–æ–º.

–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start`)
        ctx.session.aiSearchMode = false
      }
      return
    }

    await ctx.reply(`üìù –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!

–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ AI –ø–æ–º—ñ—á–Ω–∏–∫, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏.
–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start`)
  })

  bot.catch((err, ctx) => {
    console.error('Bot error:', err)
    try {
      ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start')
    } catch (e) {
      console.error('Failed to send error message:', e)
    }
  })
}

module.exports = initializeBot
