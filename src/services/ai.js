const OpenAI = require('openai')
const db = require('../database/connection')

class AIService {
  constructor() {

    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    })
  }

  async getProductRecommendations(userMessage, _userId) {
    try {
      // Get all active products with categories
      const products = await db.all(`
        SELECT p.id, p.name, p.description, p.price, p.sale_price, 
               p.stock_quantity, c.name as category_name
        FROM products p
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.active = 1 AND p.stock_quantity > 0
        ORDER BY c.name, p.name
      `)

      // Parse product variants from description
      const enhancedCatalog = products.map(p => {
        let variants = { colors: [], sizes: [] };
        try {
          if (p.description) {
            variants = JSON.parse(p.description);
          }
        } catch (e) {
          // Description might not be JSON
        }
        
        return {
          id: p.id,
          name: p.name,
          price: p.sale_price || p.price,
          category: p.category_name,
          colors: variants.colors || [],
          sizes: variants.sizes || [],
          stock: p.stock_quantity
        };
      });

      const systemPrompt = `–í–∏ - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É Vidoma, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –¥–æ–º–∞—à–Ω—å–æ–º—É –æ–¥—è–∑—ñ —Ç–∞ –ø—ñ–∂–∞–º–∞—Ö.

–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∞–º–∏:
${JSON.stringify(enhancedCatalog, null, 2)}

–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –ë—É–¥—å—Ç–µ –¥—Ä—É–∂–Ω—ñ–º —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
3. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
4. –ó–≥–∞–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–æ–≤–∞—Ä—ñ–≤
5. –î–∞–≤–∞–π—Ç–µ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ç–∞ –¥–æ–≥–ª—è–¥—É
6. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≥–∞–¥—É—î –∫–æ–ª—ñ—Ä –∞–±–æ —Ä–æ–∑–º—ñ—Ä, –ø–æ–∫–∞–∂—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ —â–æ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ —Ç–∞–∫–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö
7. –ó–∞–≤–∂–¥–∏ –∑–∞–≤–µ—Ä—à—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –¥–æ–ø–æ–º–æ–≥–∏

–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤:
- –ö–æ–º–ø–ª–µ–∫—Ç–∏ –∑ –º–µ—Ä–µ–∂–∏–≤–æ–º (—Ä—ñ–∑–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏)
- –ì–µ–π—à–∞ (–∫—ñ–º–æ–Ω–æ —Ç–∞ —Ö–∞–ª–∞—Ç–∏)
- –î–ª—è –≤—É–ª–∏—Ü—ñ (–≤–µ–ª—é—Ä–æ–≤—ñ –∫–æ–º–ø–ª–µ–∫—Ç–∏)
- –ù—ñ—á–Ω—ñ —Å–æ—Ä–æ—á–∫–∏ (—Ä—ñ–∑–Ω—ñ –¥–æ–≤–∂–∏–Ω–∏)
- –ü—ñ–∂–∞–º–∏ (–∑ –ø—Ä–∏–Ω—Ç–æ–º —Ç–∞ –±–µ–∑)
- –ü—É—Ö–Ω–∞—Å—Ç—ñ —Ç–∞–ø—É–ª—ñ
- –°–µ—Ç ¬´–ì–∞—Ä–Ω–∞¬ª
- –®–æ—Ä—Ç–∏ –∑ —Ä–æ–∑—Ä—ñ–∑–æ–º
- –Ü–Ω—à–µ

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
- –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ (–Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞, –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ —Ä–æ–∑–º—ñ—Ä–∏)
- –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏
- –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥–æ–ø–æ–º–æ–≥–∏`

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        max_tokens: 800,
        temperature: 0.7
      })

      const aiResponse = completion.choices[0]?.message?.content
      const recommendedProducts = this.extractProductRecommendations(aiResponse, products)

      return {
        text: aiResponse || '–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI –ø–æ–º—ñ—á–Ω–∏–∫–∞.',
        recommendedProducts: recommendedProducts || []
      }
    } catch (error) {
      console.error('AI Service Error:', error)
      return {
        text: `–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —É –º–µ–Ω–µ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—î—é. üòî

–í–∏ –º–æ–∂–µ—Ç–µ:
üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é
üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –Ω–∞—à—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏–º—É—Ç—å –≤—Ä—É—á–Ω—É
üè† –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ /start –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é`,
        recommendedProducts: []
      }
    }
  }

  extractProductRecommendations(aiResponse, products) {
    const recommendations = []

    // Look for product names mentioned in AI response
    products.forEach(product => {
      if (aiResponse.includes(product.name)) {
        recommendations.push({
          id: product.id,
          name: product.name,
          price: product.sale_price || product.price
        })
      }
    })

    // Limit to top 3 recommendations
    return recommendations.slice(0, 3)
  }

  createRecommendationKeyboard(recommendedProducts) {
    const buttons = []

    // Add product buttons
    if (recommendedProducts && Array.isArray(recommendedProducts)) {
        recommendedProducts.forEach(product => {
          buttons.push([{
            text: `üõç ${product.name} - ${product.price}‚Ç¥`,
            callback_data: `product_${product.id}`
          }])
        })
      }

    // Add navigation buttons
    buttons.push([
      { text: 'üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏', callback_data: 'browse_products' },
      { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ])

    return {
      reply_markup: {
        inline_keyboard: buttons
      }
    }
  }
}

module.exports = new AIService()
